// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "nymble_ticket.pb.h"
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace Nymble {
namespace Marshal {

namespace {

const ::google::protobuf::Descriptor* Ticket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ticket_reflection_ = NULL;

}  // namespace


void protobuf_BuildDesc_nymble_5fticket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;
  ::google::protobuf::DescriptorPool* pool =
    ::google::protobuf::DescriptorPool::internal_generated_pool();

  const ::google::protobuf::FileDescriptor* file = pool->InternalBuildGeneratedFile(
    "\n\023nymble_ticket.proto\022\016Nymble.Marshal\"L\n"
    "\006Ticket\022\016\n\006nymble\030\001 \002(\014\022\r\n\005mac_n\030\002 \002(\014\022\016"
    "\n\006mac_ns\030\003 \002(\014\022\023\n\013trapdoorenc\030\004 \002(\014", 115);
  Ticket_descriptor_ = file->message_type(0);
  Ticket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ticket_descriptor_,
      &Ticket::default_instance(),
      Ticket::_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ticket_descriptor_, &Ticket::default_instance());
}

// Force BuildDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nymble_5fticket_2eproto {
  StaticDescriptorInitializer_nymble_5fticket_2eproto() {
    protobuf_BuildDesc_nymble_5fticket_2eproto();
  }
} static_descriptor_initializer_nymble_5fticket_2eproto_;


// ===================================================================

const Ticket Ticket::default_instance_;

const ::std::string Ticket::_default_nymble_;
const ::std::string Ticket::_default_mac_n_;
const ::std::string Ticket::_default_mac_ns_;
const ::std::string Ticket::_default_trapdoorenc_;
const int Ticket::_offsets_[4] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, nymble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, mac_n_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, mac_ns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ticket, trapdoorenc_),
};

Ticket::Ticket()
  : _cached_size_(0),
    nymble_(const_cast< ::std::string*>(&_default_nymble_)),
    mac_n_(const_cast< ::std::string*>(&_default_mac_n_)),
    mac_ns_(const_cast< ::std::string*>(&_default_mac_ns_)),
    trapdoorenc_(const_cast< ::std::string*>(&_default_trapdoorenc_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (this == &default_instance_) {
  }
}

Ticket::Ticket(const Ticket& from)
  : _cached_size_(0),
    nymble_(const_cast< ::std::string*>(&_default_nymble_)),
    mac_n_(const_cast< ::std::string*>(&_default_mac_n_)),
    mac_ns_(const_cast< ::std::string*>(&_default_mac_ns_)),
    trapdoorenc_(const_cast< ::std::string*>(&_default_trapdoorenc_)) {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  MergeFrom(from);
}

Ticket::~Ticket() {
  if (nymble_ != &_default_nymble_) {
    delete nymble_;
  }
  if (mac_n_ != &_default_mac_n_) {
    delete mac_n_;
  }
  if (mac_ns_ != &_default_mac_ns_) {
    delete mac_ns_;
  }
  if (trapdoorenc_ != &_default_trapdoorenc_) {
    delete trapdoorenc_;
  }
  if (this != &default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Ticket::descriptor() {
  if (Ticket_descriptor_ == NULL) protobuf_BuildDesc_nymble_5fticket_2eproto();
  return Ticket_descriptor_;
}

Ticket* Ticket::New() const {
  return new Ticket;
}

const ::google::protobuf::Descriptor* Ticket::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Ticket::GetReflection() const {
  if (Ticket_reflection_ == NULL) protobuf_BuildDesc_nymble_5fticket_2eproto();
  return Ticket_reflection_;
}

}  // namespace Marshal
}  // namespace Nymble
