// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_nymble_5fblacklist_2eproto__INCLUDED
#define PROTOBUF_nymble_5fblacklist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Nymble {
namespace Marshal {

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_nymble_5fblacklist_2eproto();

class Blacklist;

// ===================================================================

class Blacklist : public ::google::protobuf::Message {
 public:
  Blacklist();
  virtual ~Blacklist();
  
  Blacklist(const Blacklist& from);
  
  inline Blacklist& operator=(const Blacklist& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const Blacklist& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  Blacklist* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 link_window = 1;
  inline bool has_link_window() const;
  inline void clear_link_window();
  inline ::google::protobuf::int32 link_window() const;
  inline void set_link_window(::google::protobuf::int32 value);
  
  // required int32 time_period = 2;
  inline bool has_time_period() const;
  inline void clear_time_period();
  inline ::google::protobuf::int32 time_period() const;
  inline void set_time_period(::google::protobuf::int32 value);
  
  // required bytes server_id = 3;
  inline bool has_server_id() const;
  inline void clear_server_id();
  inline const ::std::string& server_id() const;
  inline void set_server_id(const ::std::string& value);
  inline void set_server_id(const char* value);
  inline void set_server_id(const void* value, size_t size);
  inline ::std::string* mutable_server_id();
  
  // required bytes bl_hash = 4;
  inline bool has_bl_hash() const;
  inline void clear_bl_hash();
  inline const ::std::string& bl_hash() const;
  inline void set_bl_hash(const ::std::string& value);
  inline void set_bl_hash(const char* value);
  inline void set_bl_hash(const void* value, size_t size);
  inline ::std::string* mutable_bl_hash();
  
  // required bytes bmac_n = 5;
  inline bool has_bmac_n() const;
  inline void clear_bmac_n();
  inline const ::std::string& bmac_n() const;
  inline void set_bmac_n(const ::std::string& value);
  inline void set_bmac_n(const char* value);
  inline void set_bmac_n(const void* value, size_t size);
  inline ::std::string* mutable_bmac_n();
  
  // required bytes sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const void* value, size_t size);
  inline ::std::string* mutable_sig();
  
  // repeated bytes nymble = 7;
  inline int nymble_size() const;
  inline void clear_nymble();
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& nymble() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_nymble();
  inline const ::std::string& nymble(int index) const;
  inline ::std::string* mutable_nymble(int index);
  inline void set_nymble(int index, const ::std::string& value);
  inline void set_nymble(int index, const char* value);
  inline ::std::string* add_nymble();
  inline void add_nymble(const ::std::string& value);
  inline void add_nymble(const char* value);
  inline void set_nymble(int index, const void* value, size_t size);
  inline void add_nymble(const void* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 link_window_;
  ::google::protobuf::int32 time_period_;
  ::std::string* server_id_;
  static const ::std::string _default_server_id_;
  ::std::string* bl_hash_;
  static const ::std::string _default_bl_hash_;
  ::std::string* bmac_n_;
  static const ::std::string _default_bmac_n_;
  ::std::string* sig_;
  static const ::std::string _default_sig_;
  ::google::protobuf::RepeatedPtrField< ::std::string> nymble_;
  friend void protobuf_BuildDesc_nymble_5fblacklist_2eproto();
  static const Blacklist default_instance_;
  static const int _offsets_[7];
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// Blacklist

// required int32 link_window = 1;
inline bool Blacklist::has_link_window() const {
  return _has_bit(0);
}
inline void Blacklist::clear_link_window() {
  link_window_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Blacklist::link_window() const {
  return link_window_;
}
inline void Blacklist::set_link_window(::google::protobuf::int32 value) {
  _set_bit(0);
  link_window_ = value;
}

// required int32 time_period = 2;
inline bool Blacklist::has_time_period() const {
  return _has_bit(1);
}
inline void Blacklist::clear_time_period() {
  time_period_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Blacklist::time_period() const {
  return time_period_;
}
inline void Blacklist::set_time_period(::google::protobuf::int32 value) {
  _set_bit(1);
  time_period_ = value;
}

// required bytes server_id = 3;
inline bool Blacklist::has_server_id() const {
  return _has_bit(2);
}
inline void Blacklist::clear_server_id() {
  if (server_id_ != &_default_server_id_) {
    server_id_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Blacklist::server_id() const {
  return *server_id_;
}
inline void Blacklist::set_server_id(const ::std::string& value) {
  _set_bit(2);
  if (server_id_ == &_default_server_id_) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Blacklist::set_server_id(const char* value) {
  _set_bit(2);
  if (server_id_ == &_default_server_id_) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(value);
}
inline void Blacklist::set_server_id(const void* value, size_t size) {
  _set_bit(2);
  if (server_id_ == &_default_server_id_) {
    server_id_ = new ::std::string;
  }
  server_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blacklist::mutable_server_id() {
  _set_bit(2);
  if (server_id_ == &_default_server_id_) {
    server_id_ = new ::std::string;
  }
  return server_id_;
}

// required bytes bl_hash = 4;
inline bool Blacklist::has_bl_hash() const {
  return _has_bit(3);
}
inline void Blacklist::clear_bl_hash() {
  if (bl_hash_ != &_default_bl_hash_) {
    bl_hash_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Blacklist::bl_hash() const {
  return *bl_hash_;
}
inline void Blacklist::set_bl_hash(const ::std::string& value) {
  _set_bit(3);
  if (bl_hash_ == &_default_bl_hash_) {
    bl_hash_ = new ::std::string;
  }
  bl_hash_->assign(value);
}
inline void Blacklist::set_bl_hash(const char* value) {
  _set_bit(3);
  if (bl_hash_ == &_default_bl_hash_) {
    bl_hash_ = new ::std::string;
  }
  bl_hash_->assign(value);
}
inline void Blacklist::set_bl_hash(const void* value, size_t size) {
  _set_bit(3);
  if (bl_hash_ == &_default_bl_hash_) {
    bl_hash_ = new ::std::string;
  }
  bl_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blacklist::mutable_bl_hash() {
  _set_bit(3);
  if (bl_hash_ == &_default_bl_hash_) {
    bl_hash_ = new ::std::string;
  }
  return bl_hash_;
}

// required bytes bmac_n = 5;
inline bool Blacklist::has_bmac_n() const {
  return _has_bit(4);
}
inline void Blacklist::clear_bmac_n() {
  if (bmac_n_ != &_default_bmac_n_) {
    bmac_n_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Blacklist::bmac_n() const {
  return *bmac_n_;
}
inline void Blacklist::set_bmac_n(const ::std::string& value) {
  _set_bit(4);
  if (bmac_n_ == &_default_bmac_n_) {
    bmac_n_ = new ::std::string;
  }
  bmac_n_->assign(value);
}
inline void Blacklist::set_bmac_n(const char* value) {
  _set_bit(4);
  if (bmac_n_ == &_default_bmac_n_) {
    bmac_n_ = new ::std::string;
  }
  bmac_n_->assign(value);
}
inline void Blacklist::set_bmac_n(const void* value, size_t size) {
  _set_bit(4);
  if (bmac_n_ == &_default_bmac_n_) {
    bmac_n_ = new ::std::string;
  }
  bmac_n_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blacklist::mutable_bmac_n() {
  _set_bit(4);
  if (bmac_n_ == &_default_bmac_n_) {
    bmac_n_ = new ::std::string;
  }
  return bmac_n_;
}

// required bytes sig = 6;
inline bool Blacklist::has_sig() const {
  return _has_bit(5);
}
inline void Blacklist::clear_sig() {
  if (sig_ != &_default_sig_) {
    sig_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Blacklist::sig() const {
  return *sig_;
}
inline void Blacklist::set_sig(const ::std::string& value) {
  _set_bit(5);
  if (sig_ == &_default_sig_) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Blacklist::set_sig(const char* value) {
  _set_bit(5);
  if (sig_ == &_default_sig_) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Blacklist::set_sig(const void* value, size_t size) {
  _set_bit(5);
  if (sig_ == &_default_sig_) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blacklist::mutable_sig() {
  _set_bit(5);
  if (sig_ == &_default_sig_) {
    sig_ = new ::std::string;
  }
  return sig_;
}

// repeated bytes nymble = 7;
inline int Blacklist::nymble_size() const {
  return nymble_.size();
}
inline void Blacklist::clear_nymble() {
  nymble_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Blacklist::nymble() const {
  return nymble_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Blacklist::mutable_nymble() {
  return &nymble_;
}
inline const ::std::string& Blacklist::nymble(int index) const {
  return nymble_.Get(index);
}
inline ::std::string* Blacklist::mutable_nymble(int index) {
  return nymble_.Mutable(index);
}
inline void Blacklist::set_nymble(int index, const ::std::string& value) {
  nymble_.Mutable(index)->assign(value);
}
inline void Blacklist::set_nymble(int index, const char* value) {
  nymble_.Mutable(index)->assign(value);
}
inline ::std::string* Blacklist::add_nymble() {
  return nymble_.Add();
}
inline void Blacklist::add_nymble(const ::std::string& value) {
  nymble_.Add()->assign(value);
}
inline void Blacklist::add_nymble(const char* value) {
  nymble_.Add()->assign(value);
}
inline void Blacklist::set_nymble(int index, const void* value, size_t size) {
  nymble_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline void Blacklist::add_nymble(const void* value, size_t size) {
  nymble_.Add()->assign(reinterpret_cast<const char*>(value), size);
}


}  // namespace Marshal
}  // namespace Nymble
#endif  // PROTOBUF_nymble_5fblacklist_2eproto__INCLUDED
