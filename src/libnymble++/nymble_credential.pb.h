// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_nymble_5fcredential_2eproto__INCLUDED
#define PROTOBUF_nymble_5fcredential_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "nymble_ticket.pb.h"

namespace Nymble {
namespace Marshal {

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_nymble_5fcredential_2eproto();

class Credential;

// ===================================================================

class Credential : public ::google::protobuf::Message {
 public:
  Credential();
  virtual ~Credential();
  
  Credential(const Credential& from);
  
  inline Credential& operator=(const Credential& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const Credential& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  Credential* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes seed = 1;
  inline bool has_seed() const;
  inline void clear_seed();
  inline const ::std::string& seed() const;
  inline void set_seed(const ::std::string& value);
  inline void set_seed(const char* value);
  inline void set_seed(const void* value, size_t size);
  inline ::std::string* mutable_seed();
  
  // repeated .Nymble.Marshal.Ticket ticket = 2;
  inline int ticket_size() const;
  inline void clear_ticket();
  inline const ::google::protobuf::RepeatedPtrField< ::Nymble::Marshal::Ticket >& ticket() const;
  inline ::google::protobuf::RepeatedPtrField< ::Nymble::Marshal::Ticket >* mutable_ticket();
  inline const ::Nymble::Marshal::Ticket& ticket(int index) const;
  inline ::Nymble::Marshal::Ticket* mutable_ticket(int index);
  inline ::Nymble::Marshal::Ticket* add_ticket();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* seed_;
  static const ::std::string _default_seed_;
  ::google::protobuf::RepeatedPtrField< ::Nymble::Marshal::Ticket > ticket_;
  friend void protobuf_BuildDesc_nymble_5fcredential_2eproto();
  static const Credential default_instance_;
  static const int _offsets_[2];
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// Credential

// required bytes seed = 1;
inline bool Credential::has_seed() const {
  return _has_bit(0);
}
inline void Credential::clear_seed() {
  if (seed_ != &_default_seed_) {
    seed_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Credential::seed() const {
  return *seed_;
}
inline void Credential::set_seed(const ::std::string& value) {
  _set_bit(0);
  if (seed_ == &_default_seed_) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Credential::set_seed(const char* value) {
  _set_bit(0);
  if (seed_ == &_default_seed_) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void Credential::set_seed(const void* value, size_t size) {
  _set_bit(0);
  if (seed_ == &_default_seed_) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Credential::mutable_seed() {
  _set_bit(0);
  if (seed_ == &_default_seed_) {
    seed_ = new ::std::string;
  }
  return seed_;
}

// repeated .Nymble.Marshal.Ticket ticket = 2;
inline int Credential::ticket_size() const {
  return ticket_.size();
}
inline void Credential::clear_ticket() {
  ticket_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Nymble::Marshal::Ticket >&
Credential::ticket() const {
  return ticket_;
}
inline ::google::protobuf::RepeatedPtrField< ::Nymble::Marshal::Ticket >*
Credential::mutable_ticket() {
  return &ticket_;
}
inline const ::Nymble::Marshal::Ticket& Credential::ticket(int index) const {
  return ticket_.Get(index);
}
inline ::Nymble::Marshal::Ticket* Credential::mutable_ticket(int index) {
  return ticket_.Mutable(index);
}
inline ::Nymble::Marshal::Ticket* Credential::add_ticket() {
  return ticket_.Add();
}


}  // namespace Marshal
}  // namespace Nymble
#endif  // PROTOBUF_nymble_5fcredential_2eproto__INCLUDED
