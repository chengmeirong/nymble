// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_nymble_5fticket_2eproto__INCLUDED
#define PROTOBUF_nymble_5fticket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Nymble {
namespace Marshal {

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_nymble_5fticket_2eproto();

class Ticket;

// ===================================================================

class Ticket : public ::google::protobuf::Message {
 public:
  Ticket();
  virtual ~Ticket();
  
  Ticket(const Ticket& from);
  
  inline Ticket& operator=(const Ticket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const Ticket& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  Ticket* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes nymble = 1;
  inline bool has_nymble() const;
  inline void clear_nymble();
  inline const ::std::string& nymble() const;
  inline void set_nymble(const ::std::string& value);
  inline void set_nymble(const char* value);
  inline void set_nymble(const void* value, size_t size);
  inline ::std::string* mutable_nymble();
  
  // required bytes mac_n = 2;
  inline bool has_mac_n() const;
  inline void clear_mac_n();
  inline const ::std::string& mac_n() const;
  inline void set_mac_n(const ::std::string& value);
  inline void set_mac_n(const char* value);
  inline void set_mac_n(const void* value, size_t size);
  inline ::std::string* mutable_mac_n();
  
  // required bytes mac_ns = 3;
  inline bool has_mac_ns() const;
  inline void clear_mac_ns();
  inline const ::std::string& mac_ns() const;
  inline void set_mac_ns(const ::std::string& value);
  inline void set_mac_ns(const char* value);
  inline void set_mac_ns(const void* value, size_t size);
  inline ::std::string* mutable_mac_ns();
  
  // required bytes ctxt = 4;
  inline bool has_ctxt() const;
  inline void clear_ctxt();
  inline const ::std::string& ctxt() const;
  inline void set_ctxt(const ::std::string& value);
  inline void set_ctxt(const char* value);
  inline void set_ctxt(const void* value, size_t size);
  inline ::std::string* mutable_ctxt();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nymble_;
  static const ::std::string _default_nymble_;
  ::std::string* mac_n_;
  static const ::std::string _default_mac_n_;
  ::std::string* mac_ns_;
  static const ::std::string _default_mac_ns_;
  ::std::string* ctxt_;
  static const ::std::string _default_ctxt_;
  friend void protobuf_BuildDesc_nymble_5fticket_2eproto();
  static const Ticket default_instance_;
  static const int _offsets_[4];
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// Ticket

// required bytes nymble = 1;
inline bool Ticket::has_nymble() const {
  return _has_bit(0);
}
inline void Ticket::clear_nymble() {
  if (nymble_ != &_default_nymble_) {
    nymble_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Ticket::nymble() const {
  return *nymble_;
}
inline void Ticket::set_nymble(const ::std::string& value) {
  _set_bit(0);
  if (nymble_ == &_default_nymble_) {
    nymble_ = new ::std::string;
  }
  nymble_->assign(value);
}
inline void Ticket::set_nymble(const char* value) {
  _set_bit(0);
  if (nymble_ == &_default_nymble_) {
    nymble_ = new ::std::string;
  }
  nymble_->assign(value);
}
inline void Ticket::set_nymble(const void* value, size_t size) {
  _set_bit(0);
  if (nymble_ == &_default_nymble_) {
    nymble_ = new ::std::string;
  }
  nymble_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ticket::mutable_nymble() {
  _set_bit(0);
  if (nymble_ == &_default_nymble_) {
    nymble_ = new ::std::string;
  }
  return nymble_;
}

// required bytes mac_n = 2;
inline bool Ticket::has_mac_n() const {
  return _has_bit(1);
}
inline void Ticket::clear_mac_n() {
  if (mac_n_ != &_default_mac_n_) {
    mac_n_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Ticket::mac_n() const {
  return *mac_n_;
}
inline void Ticket::set_mac_n(const ::std::string& value) {
  _set_bit(1);
  if (mac_n_ == &_default_mac_n_) {
    mac_n_ = new ::std::string;
  }
  mac_n_->assign(value);
}
inline void Ticket::set_mac_n(const char* value) {
  _set_bit(1);
  if (mac_n_ == &_default_mac_n_) {
    mac_n_ = new ::std::string;
  }
  mac_n_->assign(value);
}
inline void Ticket::set_mac_n(const void* value, size_t size) {
  _set_bit(1);
  if (mac_n_ == &_default_mac_n_) {
    mac_n_ = new ::std::string;
  }
  mac_n_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ticket::mutable_mac_n() {
  _set_bit(1);
  if (mac_n_ == &_default_mac_n_) {
    mac_n_ = new ::std::string;
  }
  return mac_n_;
}

// required bytes mac_ns = 3;
inline bool Ticket::has_mac_ns() const {
  return _has_bit(2);
}
inline void Ticket::clear_mac_ns() {
  if (mac_ns_ != &_default_mac_ns_) {
    mac_ns_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Ticket::mac_ns() const {
  return *mac_ns_;
}
inline void Ticket::set_mac_ns(const ::std::string& value) {
  _set_bit(2);
  if (mac_ns_ == &_default_mac_ns_) {
    mac_ns_ = new ::std::string;
  }
  mac_ns_->assign(value);
}
inline void Ticket::set_mac_ns(const char* value) {
  _set_bit(2);
  if (mac_ns_ == &_default_mac_ns_) {
    mac_ns_ = new ::std::string;
  }
  mac_ns_->assign(value);
}
inline void Ticket::set_mac_ns(const void* value, size_t size) {
  _set_bit(2);
  if (mac_ns_ == &_default_mac_ns_) {
    mac_ns_ = new ::std::string;
  }
  mac_ns_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ticket::mutable_mac_ns() {
  _set_bit(2);
  if (mac_ns_ == &_default_mac_ns_) {
    mac_ns_ = new ::std::string;
  }
  return mac_ns_;
}

// required bytes ctxt = 4;
inline bool Ticket::has_ctxt() const {
  return _has_bit(3);
}
inline void Ticket::clear_ctxt() {
  if (ctxt_ != &_default_ctxt_) {
    ctxt_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Ticket::ctxt() const {
  return *ctxt_;
}
inline void Ticket::set_ctxt(const ::std::string& value) {
  _set_bit(3);
  if (ctxt_ == &_default_ctxt_) {
    ctxt_ = new ::std::string;
  }
  ctxt_->assign(value);
}
inline void Ticket::set_ctxt(const char* value) {
  _set_bit(3);
  if (ctxt_ == &_default_ctxt_) {
    ctxt_ = new ::std::string;
  }
  ctxt_->assign(value);
}
inline void Ticket::set_ctxt(const void* value, size_t size) {
  _set_bit(3);
  if (ctxt_ == &_default_ctxt_) {
    ctxt_ = new ::std::string;
  }
  ctxt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ticket::mutable_ctxt() {
  _set_bit(3);
  if (ctxt_ == &_default_ctxt_) {
    ctxt_ = new ::std::string;
  }
  return ctxt_;
}


}  // namespace Marshal
}  // namespace Nymble
#endif  // PROTOBUF_nymble_5fticket_2eproto__INCLUDED
