// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_nymble_5flinking_5ftoken_2eproto__INCLUDED
#define PROTOBUF_nymble_5flinking_5ftoken_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Nymble {
namespace Marshal {

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_nymble_5flinking_5ftoken_2eproto();

class LinkingToken;

// ===================================================================

class LinkingToken : public ::google::protobuf::Message {
 public:
  LinkingToken();
  virtual ~LinkingToken();
  
  LinkingToken(const LinkingToken& from);
  
  inline LinkingToken& operator=(const LinkingToken& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const LinkingToken& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  LinkingToken* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes trapdoor = 1;
  inline bool has_trapdoor() const;
  inline void clear_trapdoor();
  inline const ::std::string& trapdoor() const;
  inline void set_trapdoor(const ::std::string& value);
  inline void set_trapdoor(const char* value);
  inline void set_trapdoor(const void* value, size_t size);
  inline ::std::string* mutable_trapdoor();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* trapdoor_;
  static const ::std::string _default_trapdoor_;
  friend void protobuf_BuildDesc_nymble_5flinking_5ftoken_2eproto();
  static const LinkingToken default_instance_;
  static const int _offsets_[1];
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// LinkingToken

// required bytes trapdoor = 1;
inline bool LinkingToken::has_trapdoor() const {
  return _has_bit(0);
}
inline void LinkingToken::clear_trapdoor() {
  if (trapdoor_ != &_default_trapdoor_) {
    trapdoor_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& LinkingToken::trapdoor() const {
  return *trapdoor_;
}
inline void LinkingToken::set_trapdoor(const ::std::string& value) {
  _set_bit(0);
  if (trapdoor_ == &_default_trapdoor_) {
    trapdoor_ = new ::std::string;
  }
  trapdoor_->assign(value);
}
inline void LinkingToken::set_trapdoor(const char* value) {
  _set_bit(0);
  if (trapdoor_ == &_default_trapdoor_) {
    trapdoor_ = new ::std::string;
  }
  trapdoor_->assign(value);
}
inline void LinkingToken::set_trapdoor(const void* value, size_t size) {
  _set_bit(0);
  if (trapdoor_ == &_default_trapdoor_) {
    trapdoor_ = new ::std::string;
  }
  trapdoor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LinkingToken::mutable_trapdoor() {
  _set_bit(0);
  if (trapdoor_ == &_default_trapdoor_) {
    trapdoor_ = new ::std::string;
  }
  return trapdoor_;
}


}  // namespace Marshal
}  // namespace Nymble
#endif  // PROTOBUF_nymble_5flinking_5ftoken_2eproto__INCLUDED
