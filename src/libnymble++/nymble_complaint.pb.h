// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_nymble_5fcomplaint_2eproto__INCLUDED
#define PROTOBUF_nymble_5fcomplaint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "nymble_ticket.pb.h"

namespace Nymble {
namespace Marshal {

// Internal implementation detail -- do not call this.
void protobuf_BuildDesc_nymble_5fcomplaint_2eproto();

class Complaint;

// ===================================================================

class Complaint : public ::google::protobuf::Message {
 public:
  Complaint();
  virtual ~Complaint();
  
  Complaint(const Complaint& from);
  
  inline Complaint& operator=(const Complaint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline static const Complaint& default_instance() {
    return default_instance_;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  
  // implements Message ----------------------------------------------
  
  Complaint* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 time_period = 1;
  inline bool has_time_period() const;
  inline void clear_time_period();
  inline ::google::protobuf::int32 time_period() const;
  inline void set_time_period(::google::protobuf::int32 value);
  
  // required .Nymble.Marshal.Ticket ticket = 2;
  inline bool has_ticket() const;
  inline void clear_ticket();
  inline const ::Nymble::Marshal::Ticket& ticket() const;
  inline ::Nymble::Marshal::Ticket* mutable_ticket();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 time_period_;
  ::Nymble::Marshal::Ticket* ticket_;
  friend void protobuf_BuildDesc_nymble_5fcomplaint_2eproto();
  static const Complaint default_instance_;
  static const int _offsets_[2];
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
};
// ===================================================================


// ===================================================================


// ===================================================================

// Complaint

// required int32 time_period = 1;
inline bool Complaint::has_time_period() const {
  return _has_bit(0);
}
inline void Complaint::clear_time_period() {
  time_period_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Complaint::time_period() const {
  return time_period_;
}
inline void Complaint::set_time_period(::google::protobuf::int32 value) {
  _set_bit(0);
  time_period_ = value;
}

// required .Nymble.Marshal.Ticket ticket = 2;
inline bool Complaint::has_ticket() const {
  return _has_bit(1);
}
inline void Complaint::clear_ticket() {
  if (ticket_ != NULL) ticket_->::Nymble::Marshal::Ticket::Clear();
  _clear_bit(1);
}
inline const ::Nymble::Marshal::Ticket& Complaint::ticket() const {
  return ticket_ != NULL ? *ticket_ : *default_instance_.ticket_;
}
inline ::Nymble::Marshal::Ticket* Complaint::mutable_ticket() {
  _set_bit(1);
  if (ticket_ == NULL) ticket_ = new ::Nymble::Marshal::Ticket;
  return ticket_;
}


}  // namespace Marshal
}  // namespace Nymble
#endif  // PROTOBUF_nymble_5fcomplaint_2eproto__INCLUDED
